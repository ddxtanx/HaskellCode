
==================== FINAL INTERFACE ====================
2018-01-20 22:41:54.631076 UTC

interface main:LogAnalysis 8022
  interface hash: 3391cf8771384b23fce0feca0aff12c6
  ABI hash: 2e052463f5e887ecb08eb5d8276cf74a
  export-list hash: e9de01392b0d00f9a74a74df51809d67
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: c1b8833e93eb932f92dd3a62e19e2e16
  sig of: Nothing
  used TH splices: False
  where
exports:
  LogAnalysis.build
  LogAnalysis.getErrorLevel
  LogAnalysis.getMessage
  LogAnalysis.getTimestamp
  LogAnalysis.getTimestampStr
  LogAnalysis.inOrder
  LogAnalysis.insert
  LogAnalysis.messageArrayToTimestampArray
  LogAnalysis.parse
  LogAnalysis.parseError
  LogAnalysis.parseInfo
  LogAnalysis.parseMessage
  LogAnalysis.parseWarning
  LogAnalysis.sortMessageArray
  LogAnalysis.sortTree
  LogAnalysis.treeToMessageArray
  LogAnalysis.whatWentWrong
module dependencies: Log StringFunctions
package dependencies: base-4.10.1.0* ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:Text.Read 9e862e012b3c71e83cb56fb456188f44
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  Log d428298e4e468e273acfcf025151aa95
  exports: 1e965eede40e717769a47f1982eba7aa
  Error ad1ac3193f28f2a82ab60d2ba7a98ee5
  Info f10ea9971ace7fdba01148566073ce57
  Leaf b5487609cb368c79a29dd806cdfd38c5
  LogMessage 7d3dc69eab03a6d44dae49224395da46
  LogMessage 7eff1d7cd637a7523fa56473235af298
  MessageTree 4ce80532de54f0db584d2a9d97184691
  Node d5f6d9516c469aae43257fc48c286e18
  Unknown 2f55d4bb2467b834ec21be42487526da
  getErrorLevelFromLogMessage 417a57938fb93cc1bfb5140cffa5ab40
  getMessageFromLogMessage 00eaf09fb3be6323a06a4276bbd7b68a
  getMessageFromNode db6f1fe58850482b78ddc4fb8dbe08bb
  getTimestampFromLogMessage 96a7b111b0a102511f45e78af633afa9
  setMessage 3fb94f80d43cf7bba829549e679225e3
import  -/  StringFunctions 59d977a4642d9951dce4ef0d3a5b4f2a
  exports: e53267a0c5c42b2610c4ef67d2027642
  split 70d7176f27a3bcf3a7bbf3aa7555bc99
  splitBySpace e777313b6617719a5ab54cd6cdbc0839
0dad971a2203013841c5c243e0bdf478
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   LogAnalysis.$trModule3
                   LogAnalysis.$trModule1) -}
c443d1a1747564d32e58149bbabfc7f8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LogAnalysis.$trModule2) -}
5261747a30af801aef35df88c0236e77
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LogAnalysis"#) -}
b62c5ceed2ea05c60c832cc3ee51e4b3
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LogAnalysis.$trModule4) -}
56f486b161b0a4c0a5babb21081921f0
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
a29fbd87a1bf5dc954dcdaddd6969fb2
  $wparseError ::
    GHC.Base.String
    -> (# Log.MessageType, Log.TimeStamp, GHC.Base.String #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String) ->
                 let {
                   errorStrNoLevel :: [GHC.Types.Char]
                   = case LogAnalysis.getErrorLevel w of ww2 { GHC.Types.I# ww3 ->
                     case GHC.Show.$wshowSignedInt
                            0#
                            ww3
                            (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                     case GHC.List.$wlenAcc
                            @ GHC.Types.Char
                            (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                            0# of ww1 { DEFAULT ->
                     let {
                       x :: GHC.Prim.Int# = GHC.Prim.+# ww1 1#
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<=# x 0#) of wild {
                       GHC.Types.False -> LogAnalysis.$wunsafeDrop1 @ GHC.Types.Char x w
                       GHC.Types.True -> w } } } }
                 } in
                 (# Log.Error (LogAnalysis.getErrorLevel w),
                    LogAnalysis.getErrorLevel errorStrNoLevel,
                    LogAnalysis.getMessage errorStrNoLevel #)) -}
9211c98dae2e0e41ea425fbd3499eb90
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
38c773379bd9c24a652d868a799eb94f
  $wunsafeDrop1 :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
088212420d764c72b2bcea23b75848b9
  build :: [Log.LogMessage] -> Log.MessageTree
  {- Arity: 1, Strictness: <S,1*U> -}
63c4866f081f132b2ad27f123aef95f3
  getErrorLevel :: GHC.Base.String -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (x :: GHC.Base.String) ->
                 case Text.Read.readEither8
                        @ GHC.Types.Int
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Types.Int
                           LogAnalysis.getErrorLevel3
                           (case StringFunctions.$wsplit
                                   x
                                   StringFunctions.splitBySpace1 of ww { (#,#) ww1 ww2 ->
                            ww1 })) of wild {
                   [] -> LogAnalysis.getErrorLevel2
                   : x1 ds
                   -> case ds of wild1 {
                        [] -> x1 : ipv ipv1 -> LogAnalysis.getErrorLevel1 } }) -}
9805afe2fc61320a5b5bfa567b531c4a
  getErrorLevel1 :: GHC.Types.Int
  {- Strictness: x -}
2c94889686eaf1bea827a9b36af73dc1
  getErrorLevel2 :: GHC.Types.Int
  {- Strictness: x -}
9036a97b513e6d30df8f317c53a69bc5
  getErrorLevel3 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt_$sreadNumber
                   GHC.Read.$fReadInt2
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Int
                   (Text.Read.readEither7 @ GHC.Types.Int)) -}
016c67fb4775ac217f6228cbb0e4f9fd
  getMessage :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (x :: GHC.Base.String) ->
                 case StringFunctions.$wsplit
                        x
                        StringFunctions.splitBySpace1 of ww { (#,#) ww1 ww2 ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char ww1 0# of ww4 { DEFAULT ->
                 let {
                   x1 :: GHC.Prim.Int# = GHC.Prim.+# ww4 1#
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# x1 0#) of wild {
                   GHC.Types.False -> LogAnalysis.$wunsafeDrop @ GHC.Types.Char x1 x
                   GHC.Types.True -> x } } }) -}
26edd79443a04993ed896ef2f2e22687
  getTimestamp :: GHC.Base.String -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (LogAnalysis.getErrorLevel) -}
decc989b5171c2b1109855eab741cb08
  getTimestampStr :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Base.String) ->
                 case StringFunctions.$wsplit
                        x
                        StringFunctions.splitBySpace1 of ww { (#,#) ww1 ww2 ->
                 ww1 }) -}
b4e5d78cf22889d23d4eefb6e3789c95
  inOrder :: Log.MessageTree -> [Log.LogMessage]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (tree :: Log.MessageTree) ->
                 LogAnalysis.treeToMessageArray (LogAnalysis.sortTree tree)) -}
04fe49079390d1c8fcb60641397e83d5
  insert :: Log.LogMessage -> Log.MessageTree -> Log.MessageTree
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
3bc4bb3dc149826fcbf4fdc5a35f4837
  messageArrayToTimestampArray :: [Log.LogMessage] -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
ecccce9d9c8f4055458dabf09afe5342
  parse :: GHC.Base.String -> [Log.LogMessage]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (x :: GHC.Base.String) ->
                 case StringFunctions.$wsplit
                        x
                        LogAnalysis.parse1 of ww { (#,#) ww1 ww2 ->
                 LogAnalysis.parse_go (GHC.Types.: @ GHC.Base.String ww1 ww2) }) -}
08196c497ee0eff3a2b68c0051deb369
  parse1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '\n'#) -}
21b21233641a40d34060d8b71113bd1b
  parseError :: GHC.Base.String -> Log.LogMessage
  {- Arity: 1, Strictness: <L,U>m1, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case LogAnalysis.$wparseError w of ww { (#,,#) ww1 ww2 ww3 ->
                 Log.LogMessage ww1 ww2 ww3 }) -}
9c2d865720c191871d5f02035dcb843c
  parseInfo :: GHC.Base.String -> Log.LogMessage
  {- Arity: 1, Strictness: <L,U>m1,
     Unfolding: InlineRule (1, True, False)
                (\ (infoStr :: GHC.Base.String) ->
                 Log.LogMessage
                   Log.Info
                   (LogAnalysis.getErrorLevel infoStr)
                   (LogAnalysis.getMessage infoStr)) -}
d8dd393c0550127ed7a1235189a40bd3
  parseMessage :: GHC.Base.String -> Log.LogMessage
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: GHC.Base.String) ->
                 case x of wild {
                   [] -> LogAnalysis.parseMessage1
                   : ds ds1
                   -> case ds of wild1 { GHC.Types.C# ds2 ->
                      case ds2 of ds3 {
                        DEFAULT -> Log.Unknown wild
                        'E'#
                        -> case ds1 of wild2 {
                             [] -> Log.Unknown wild
                             : ds4 rest
                             -> case ds4 of wild3 { GHC.Types.C# ds5 ->
                                case ds5 of ds6 {
                                  DEFAULT -> Log.Unknown wild
                                  ' '# -> LogAnalysis.parseError rest } } }
                        'I'#
                        -> case ds1 of wild2 {
                             [] -> Log.Unknown wild
                             : ds4 rest
                             -> case ds4 of wild3 { GHC.Types.C# ds5 ->
                                case ds5 of ds6 {
                                  DEFAULT -> Log.Unknown wild
                                  ' '# -> LogAnalysis.parseWarning rest } } }
                        'W'#
                        -> case ds1 of wild2 {
                             [] -> Log.Unknown wild
                             : ds4 rest
                             -> case ds4 of wild3 { GHC.Types.C# ds5 ->
                                case ds5 of ds6 {
                                  DEFAULT -> Log.Unknown wild
                                  ' '# -> LogAnalysis.parseWarning rest } } } } } }) -}
f5bcae1bed854dad5627bd69d1a72400
  parseMessage1 :: Log.LogMessage
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Log.Unknown (GHC.Types.[] @ GHC.Types.Char)) -}
c22bf1b5d18687d618af651459dd26a3
  parseWarning :: GHC.Base.String -> Log.LogMessage
  {- Arity: 1, Strictness: <L,U>m1,
     Unfolding: InlineRule (1, True, False)
                (\ (warnStr :: GHC.Base.String) ->
                 Log.LogMessage
                   Log.Info
                   (LogAnalysis.getErrorLevel warnStr)
                   (LogAnalysis.getMessage warnStr)) -}
9e85a487b504ab3ce6bd777d26862e2d
  parse_go :: [GHC.Base.String] -> [Log.LogMessage]
  {- Arity: 1, Strictness: <S,1*U> -}
7151f894b7b4bfa1f71598ae8bbac965
  sortMessageArray :: [Log.LogMessage] -> [Log.LogMessage]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (messageArr :: [Log.LogMessage]) ->
                 LogAnalysis.treeToMessageArray
                   (LogAnalysis.sortTree (LogAnalysis.build messageArr))) -}
5a58f8a7f6742e3c3583fa4100f7c904
  sortTree :: Log.MessageTree -> Log.MessageTree
  {- Arity: 1, Strictness: <S,1*U> -}
28ad1738d6cce2ea8d655a35ca18c2b8
  treeToMessageArray :: Log.MessageTree -> [Log.LogMessage]
  {- Arity: 1, Strictness: <S,1*U> -}
c1e64801efd50221b4bcd4763f189709
  whatWentWrong :: [Log.LogMessage] -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (unsortedArray :: [Log.LogMessage]) ->
                 GHC.List.reverse1
                   @ GHC.Base.String
                   (LogAnalysis.whatWentWrong_go
                      (LogAnalysis.treeToMessageArray
                         (LogAnalysis.sortTree (LogAnalysis.build unsortedArray))))
                   (GHC.Types.[] @ GHC.Base.String)) -}
098e901c94115312c99094ef3c09c9dd
  whatWentWrong_go :: [Log.LogMessage] -> [GHC.Base.String]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

